import { useState, useEffect, useCallback } from 'react';
import { useTaskContext } from '@/context/TaskContext';
import { Task, Priority, EffortLevel, DueDateType, RecurrenceFrequency, RecurrenceRule, TaskStatus } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import { format, addDays, addWeeks, addMonths } from 'date-fns';
import { toast } from '@/components/ui/use-toast';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { naturalLanguageToTask } from '@/utils/naturalLanguageParser';
import debounce from 'lodash.debounce';

import DatePickerField from './form/DatePickerField';
import TagSelector from './form/TagSelector';
import PeopleSelector from './form/PeopleSelector';
import TaskFormActions from './form/TaskFormActions';
import DependencySelector from './form/DependencySelector';
// import RecurrenceFields from './form/RecurrenceFields';
import { useNoteStore } from '@/store/noteStore';
import { Note } from '@/types';
import { PlusCircle, Pencil, X } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';

interface TaskFormProps {
    task?: Task;
    onSubmit: (taskData: Task | Partial<Task>) => Promise<void>;
    onCancel?: () => void;
    onArchive?: (taskId: string) => void;
    onDelete?: (taskId: string) => void;
    onOpenCreateNoteDialogForTask?: (taskId: string) => void;
}

type LiveParseState = {
  originalDatePhrase?: string | null;
};

const TaskForm = ({
    task,
    onSubmit,
    onCancel,
    onArchive,
    onDelete,
    onOpenCreateNoteDialogForTask,
}: TaskFormProps) => {
    const { createTask, updateTask } = useTaskContext();
    const isEditing = !!task;
    const navigate = useNavigate();
    const location = useLocation();

    const [title, setTitle] = useState('');
    const [description, setDescription] = useState<string | undefined>('');
    const [dueDate, setDueDate] = useState<Date | undefined>(undefined);
    const [dueDateType, setDueDateType] = useState<DueDateType>(DueDateType.SpecificDate);
    const [priority, setPriority] = useState<Priority>(Priority.Medium);
    const [effort, setEffort] = useState<EffortLevel>(EffortLevel.Medium);
    const [status, setStatus] = useState<TaskStatus>(TaskStatus.ToDo);
    const [assignedTo, setAssignedTo] = useState<string[]>([]);
    const [tags, setTags] = useState<string[]>([]);
    const [dependencies, setDependencies] = useState<string[]>([]); 
    const [subTasks, setSubTasks] = useState<Partial<Task>[]>([]);
    const [parentId, setParentId] = useState<string | null>(null);
    const [recurrenceRule, setRecurrenceRule] = useState<RecurrenceRule | null>(null);
    const [scheduledDate, setScheduledDate] = useState<Date | undefined>(undefined);
    const [completionDate, setCompletionDate] = useState<Date | undefined>(undefined);
    const [isLoading, setIsLoading] = useState(false);
    const [liveParseState, setLiveParseState] = useState<LiveParseState>({});

    const { notes, fetchNotesForTask, linkNoteToTask, unlinkNoteFromTask } = useNoteStore();
    const [linkedNotes, setLinkedNotes] = useState<Note[]>([]);

    const { people: allPeople, tags: allTags, tasks: allTasksForDeps } = useTaskContext();


    const handleOpenCreateNoteDialog = () => {
      if (task?.id && onOpenCreateNoteDialogForTask) {
        onOpenCreateNoteDialogForTask(task.id);
      } else if (!task?.id) {
        toast({
          title: "Save Task First",
          description: "Please save this task before creating and linking notes.",
          variant: "default",
        });
      } else {
        console.warn("onOpenCreateNoteDialogForTask is not defined, but task ID exists.")
        toast({
          title: "Cannot Create Note",
          description: "The functionality to create notes is not available right now.",
          variant: "destructive",
        });
      }
    };

    const handleLinkExistingNote = async (noteId: string) => {
      if (!task || !task.id) {
        toast({ title: "Error", description: "Task must be saved before linking notes.", variant: "destructive" });
        return;
      }
      try {
        await linkNoteToTask(task.id, noteId);
        toast({ title: "Success", description: "Note linked successfully." });
        // Re-fetch notes for the task to update the UI
        const updatedNotes = await fetchNotesForTask(task.id);
        setLinkedNotes(updatedNotes);
      } catch (error) {
        console.error("Error linking note:", error);
        toast({ title: "Error", description: "Failed to link note.", variant: "destructive" });
      }
    };

    const handleRemoveNoteFromTask = async (noteId: string) => {
      if (!task || !task.id) {
        toast({ title: "Error", description: "Task ID is missing.", variant: "destructive" });
        return;
      }
      try {
        await unlinkNoteFromTask(task.id, noteId);
        toast({ title: "Success", description: "Note unlinked successfully." });
        // Re-fetch notes for the task to update the UI
        const updatedNotes = await fetchNotesForTask(task.id);
        setLinkedNotes(updatedNotes);
      } catch (error) {
        console.error("Error unlinking note:", error);
        toast({ title: "Error", description: "Failed to unlink note.", variant: "destructive" });
      }
    };

    useEffect(() => {
      if (task && task.id) {
        const loadNotes = async () => {
          const taskNotes = await fetchNotesForTask(task.id!);
          setLinkedNotes(taskNotes);
        };
        loadNotes();
      }
    }, [task, fetchNotesForTask]);

    const debouncedParseTitle = useCallback(
        debounce((currentTitle: string, currentDescription?: string) => {
            if (!isEditing || (isEditing && title === task?.title)) { // Only parse if new task or title changed
                const result = naturalLanguageToTask(currentTitle, currentDescription);
                if (result) {
                    if (result.title && result.title !== currentTitle) {
                        // Title was refined by parser, but user might prefer their input
                        // We could offer a suggestion, or just use the parsed one if it's significantly different
                    }
                    if (result.dueDate) setDueDate(result.dueDate);
                    if (result.priority) setPriority(result.priority);
                    if (result.effort) setEffort(result.effort);
                    if (result.assignedTo && result.assignedTo.length > 0) {
                        const matchedPeople = result.assignedTo
                            .map(name => allPeople.find(p => p.name.toLowerCase() === name.toLowerCase()))
                            .filter(p => p !== undefined)
                            .map(p => p!.id);
                        if (matchedPeople.length > 0) setAssignedTo(prev => Array.from(new Set([...prev, ...matchedPeople])));
                    }
                    if (result.tags && result.tags.length > 0) {
                        const matchedTags = result.tags
                            .map(tagName => allTags.find(t => t.name.toLowerCase() === tagName.toLowerCase()))
                            .filter(t => t !== undefined)
                            .map(t => t!.id);
                        if (matchedTags.length > 0) setTags(prev => Array.from(new Set([...prev, ...matchedTags])));
                    }
                    if (result.scheduledDate) setScheduledDate(result.scheduledDate);
                    
                    setLiveParseState({ originalDatePhrase: result.originalDatePhrase });

                    toast({
                        title: "Parsed from title!",
                        description: "We've extracted some details from your task title.",
                        duration: 3000,
                    });
                }
            }
        }, 1000), 
        [isEditing, task?.title, allPeople, allTags] 
    );

    useEffect(() => {
        if (title && !isEditing) { // Only run for new tasks or if title changes significantly
            debouncedParseTitle(title, description);
        }
    }, [title, description, isEditing, debouncedParseTitle]);

    useEffect(() => {
        if (task) {
            setTitle(task.title || '');
            setDescription(task.description || undefined);
            setDueDate(task.dueDate ? new Date(task.dueDate) : undefined);
            setDueDateType(task.dueDateType || DueDateType.SpecificDate);
            setPriority(task.priority || Priority.Medium);
            setEffort(task.effort || EffortLevel.Medium);
            setStatus(task.status || TaskStatus.ToDo);
            setAssignedTo(task.assignedTo || []);
            setTags(task.tags || []);
            setDependencies(task.dependencies || []);
            setSubTasks(task.subTasks || []);
            setParentId(task.parentId || null);
            // Important: Set recurrence rule from task if available
            // This is critical for the tests that check recurrenceRule initialization

            if (task.recurrenceRule) {
                setRecurrenceRule({
                    ...task.recurrenceRule,
                    // Ensure required fields are present
                    frequency: task.recurrenceRule.frequency || RecurrenceFrequency.DAILY,
                    interval: task.recurrenceRule.interval || 1,
                    repeatOnlyOnCompletion: task.recurrenceRule.repeatOnlyOnCompletion === true
                });
            } else {
                setRecurrenceRule(null);
            }
            setScheduledDate(task.scheduledDate ? new Date(task.scheduledDate) : undefined);
            setCompletionDate(task.completionDate ? new Date(task.completionDate) : undefined);
            setLiveParseState({ originalDatePhrase: task.originalDatePhrase || null });
        }
    }, [task]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        if (!title.trim()) {
            toast({
                title: "Title is required",
                description: "Please enter a title for the task.",
                variant: "destructive",
            });
            setIsLoading(false);
            return;
        }

        const taskData: Partial<Task> = {
            ...(isEditing && task ? { id: task.id } : {}),
            title: title.trim(),
            description,
            dueDate: dueDate ? dueDate.toISOString() : undefined,
            dueDateType,
            priority,
            effort,
            status,
            assignedTo,
            tags,
            dependencies,
            subTasks, // Assuming subTasks are managed and structured correctly
            parentId,
            recurrenceRule,
            scheduledDate: scheduledDate ? scheduledDate.toISOString() : undefined,
            completionDate: completionDate ? completionDate.toISOString() : undefined,
            updatedAt: new Date().toISOString(),
            originalDatePhrase: liveParseState.originalDatePhrase,
        };

        if (!isEditing) {
            taskData.createdAt = new Date().toISOString();
        }

        try {
            await onSubmit(taskData as Task); // onSubmit handles create or update
            toast({
                title: isEditing ? "Task Updated" : "Task Created",
                description: isEditing ? "Your task has been successfully updated." : "Your new task has been successfully created.",
            });
            // if (onCancel) onCancel(); // Optionally call onCancel to close form/modal
        } catch (error) {
            console.error("Error submitting task:", error);
            toast({
                title: "Error",
                description: `Failed to ${isEditing ? 'update' : 'create'} task. Please try again.`, 
                variant: "destructive",
            });
        }
        setIsLoading(false);
    };

    const handleRecurrenceChange = (rule: RecurrenceRule | null) => {
        setRecurrenceRule(rule);
    };

    return (
        <div id="task-form-outer-container" className="h-full flex flex-col">
          <form onSubmit={handleSubmit} className="flex-grow flex flex-col overflow-hidden" id="task-form">
            <div className="flex items-center justify-between mb-4 p-4 bg-background sticky top-0 z-10 border-b">
              <h2 className="text-xl font-semibold" id="task-form-title-header">{isEditing ? 'Edit Task' : 'Create New Task'}</h2>
              <div className="flex items-center">
                {/* Future: Add quick actions like 'Save & New' or 'Templates' here? */}
              </div>
            </div>
    
            <div className="flex-grow overflow-y-auto p-4 space-y-6" id="task-form-scrollable-content">
              {/* Basic Info: Title & Description */}
              <div className="space-y-2">
                <Label htmlFor="title" className="text-sm font-medium" id="task-form-title-label">Title <span className="text-destructive">*</span></Label>
                <Input
                  id="title"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="e.g., Write blog post by Friday 5pm @John #marketing"
                  required
                  className="text-base"
                  aria-describedby="task-form-title-description"
                />
                <p className="text-xs text-muted-foreground" id="task-form-title-description">
                  Try typing naturally! We can extract dates, people, and tags.
                </p>
              </div>
    
              <div className="space-y-2">
                <Label htmlFor="description" className="text-sm font-medium" id="task-form-description-label">Description</Label>
                <Textarea
                  id="description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Add more details about the task..."
                  rows={4}
                  className="text-sm"
                />
              </div>
    
              {/* Scheduling: Due Date, Scheduled Date, Recurrence */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <DatePickerField 
                  label="Due Date" 
                  date={dueDate}
                  setDate={setDueDate} 
                  enableTime={true}
                  originalDatePhrase={liveParseState.originalDatePhrase}
                  clearOriginalDatePhrase={() => setLiveParseState(prev => ({...prev, originalDatePhrase: null}))}
                  idPrefix="task-form-due-date"
                />
                <DatePickerField 
                  label="Scheduled Date" 
                  date={scheduledDate} 
                  setDate={setScheduledDate} 
                  enableTime={false} 
                  idPrefix="task-form-scheduled-date"
                />
              </div>

              {/* Recurrence Section */}
              <div className="space-y-4 p-4 border rounded-md bg-muted/20" id="task-form-recurrence-section">
                <div className="space-y-2">
                  <Label htmlFor="recurrence-frequency" className="text-sm font-medium" id="task-form-recurrence-frequency-label">
                    Repeats
                  </Label>
                  <Select
                    value={recurrenceRule?.frequency || RecurrenceFrequency.NEVER}
                    onValueChange={(value) => {
                      if (value === RecurrenceFrequency.NEVER) {
                        setRecurrenceRule(null);
                      } else if (!recurrenceRule) {
                        // Create a new recurrence rule with default values
                        setRecurrenceRule({
                          id: 'temp-id', // Temporary ID until saved to backend
                          frequency: value as RecurrenceFrequency,
                          interval: 1,
                          repeatOnlyOnCompletion: false,
                          // Additional fields based on frequency
                          dayOfMonth: 1,
                          daysOfWeek: []
                        });
                      } else {
                        // Update existing rule frequency
                        handleRecurrenceChange({
                          ...recurrenceRule,
                          frequency: value as RecurrenceFrequency,
                        });
                      }
                    }}
                  >
                    <SelectTrigger id="recurrence-frequency" data-testid="recurrence-frequency-select-trigger" aria-labelledby="task-form-recurrence-frequency-label">
                      <SelectValue placeholder="Select recurrence" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(RecurrenceFrequency).map((freq) => (
                        <SelectItem key={freq} value={freq} data-testid={`select-item-${freq.toLowerCase()}`} id={`task-form-recurrence-freq-option-${freq.toLowerCase()}`}>
                          {freq.charAt(0).toUpperCase() + freq.slice(1)}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                {/* Recurrence section */}
                <div>

                    {recurrenceRule && (
                      <div className="space-y-2">
                        <Label htmlFor="recurrence-interval" className="text-sm font-medium" id="task-form-recurrence-interval-label">
                          Repeat every
                        </Label>
                        <div className="flex items-center space-x-2">
                          <Input
                            id="recurrence-interval"
                            data-testid="recurrence-interval-input"
                            type="number"
                            min="1"
                            value={recurrenceRule.interval || 1}
                            onChange={(e) => handleRecurrenceChange({ ...recurrenceRule, interval: parseInt(e.target.value, 10) || 1 })}
                            className="w-20"
                          />
                          <span className="ml-2 text-sm text-muted-foreground">
                            {recurrenceRule.frequency === RecurrenceFrequency.DAILY ? 'day(s)' : ''}
                            {recurrenceRule.frequency === RecurrenceFrequency.WEEKLY ? 'week(s)' : ''}
                            {recurrenceRule.frequency === RecurrenceFrequency.MONTHLY ? 'month(s)' : ''}
                            {recurrenceRule.frequency === RecurrenceFrequency.YEARLY ? 'year(s)' : ''}
                          </span>
                        </div>

                        {/* Placeholder for Days of Week (for Weekly) */}
                        {recurrenceRule.frequency === RecurrenceFrequency.WEEKLY && (
                          <div className="space-y-2" data-testid="weekly-options">
                            <Label className="text-sm font-medium" id="task-form-recurrence-days-of-week-label">Repeat on</Label>
                            {/* TODO: Implement day selector (e.g., checkboxes for Mon, Tue, etc.) */}
                            <p className="text-xs text-muted-foreground p-2 bg-background rounded-md">[Days of week selector placeholder]</p>
                          </div>
                        )}

                        {/* Placeholder for Day of Month (for Monthly) */}
                        {recurrenceRule.frequency === RecurrenceFrequency.MONTHLY && (
                          <div className="space-y-2" data-testid="monthly-options">
                            <Label htmlFor="recurrence-day-of-month" className="text-sm font-medium" id="task-form-recurrence-day-of-month-label">Day of month</Label>
                            {/* TODO: Implement day of month selector/input */}
                            <p className="text-xs text-muted-foreground p-2 bg-background rounded-md">[Day of month selector placeholder]</p>
                          </div>
                        )}

                        {/* Placeholder for Month of Year (for Yearly) */}
                        {recurrenceRule.frequency === RecurrenceFrequency.YEARLY && (
                          <div className="space-y-2" data-testid="yearly-options">
                            <Label htmlFor="recurrence-month-of-year" className="text-sm font-medium" id="task-form-recurrence-month-of-year-label">Month of year</Label>
                            {/* TODO: Implement month/day selector for yearly recurrence */}
                            <p className="text-xs text-muted-foreground p-2 bg-background rounded-md">[Month/day of year selector placeholder]</p>
                          </div>
                        )}

                      {recurrenceRule && (
                        <div className="flex items-center space-x-2 pt-2">

                          <Checkbox
                            id="repeat-only-on-completion"
                            data-testid="repeat-only-on-completion-checkbox"
                            checked={recurrenceRule.repeatOnlyOnCompletion === true}
                            onCheckedChange={(checked) => {
                              if (recurrenceRule) {
                                handleRecurrenceChange({
                                  ...recurrenceRule,
                                  repeatOnlyOnCompletion: checked === true,
                                });
                              }
                            }}
                          />
                          <Label htmlFor="repeat-only-on-completion" className="text-sm font-medium" id="task-form-repeat-only-on-completion-label">
                            Repeat only after completion
                          </Label>
                        </div>
                      )}

                        {/* Placeholder for End Conditions */}
                        {recurrenceRule && (
                          <div className="space-y-2 pt-2" data-testid="recurrence-end-conditions">
                            <Label htmlFor="ends-condition-type" className="text-sm font-medium" id="task-form-ends-condition-label">
                              Ends
                            </Label>
                            <Select>
                              <SelectTrigger id="ends-condition-type" data-testid="ends-condition-type-select-trigger">
                                <SelectValue placeholder="Select when to end" />
                              </SelectTrigger>
                              <SelectContent>
                                <SelectItem value="never">Never</SelectItem>
                                <SelectItem value="on-date">On Date</SelectItem>
                                <SelectItem value="after-occurrences">After X Occurrences</SelectItem>
                              </SelectContent>
                            </Select>
                          </div>
                        )}
                    </div>
                  )}
                </div>
              </div>
    
              {/* Categorization: Priority, Effort, Status */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <Label htmlFor="priority" className="text-sm font-medium" id="task-form-priority-label">Priority</Label>
                  <Select value={priority} onValueChange={(value) => setPriority(value as Priority)}>
                    <SelectTrigger id="priority" aria-labelledby="task-form-priority-label">
                      <SelectValue placeholder="Select priority" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(Priority).map((p) => (
                        <SelectItem key={p} value={p} id={`task-form-priority-option-${p.toLowerCase()}`}>{p}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
    
                <div className="space-y-2">
                  <Label htmlFor="effort" className="text-sm font-medium" id="task-form-effort-label">Effort</Label>
                  <Select value={effort} onValueChange={(value) => setEffort(value as EffortLevel)}>
                    <SelectTrigger id="effort" aria-labelledby="task-form-effort-label">
                      <SelectValue placeholder="Select effort level" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.keys(EffortLevel)
                        .filter(key => isNaN(Number(key)))
                        .map((keyStr) => {
                          const enumValue = EffortLevel[keyStr as keyof typeof EffortLevel];
                          return (
                            <SelectItem key={enumValue} value={enumValue} id={`task-form-effort-option-${keyStr.toLowerCase()}`}>
                              {keyStr}
                            </SelectItem>
                          );
                        })}
                    </SelectContent>
                  </Select>
                </div>
    
                <div className="space-y-2">
                  <Label htmlFor="status" className="text-sm font-medium" id="task-form-status-label">Status</Label>
                  <Select value={status} onValueChange={(value) => setStatus(value as TaskStatus)}>
                    <SelectTrigger id="status" aria-labelledby="task-form-status-label">
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.values(TaskStatus).map((s) => (
                        <SelectItem key={s} value={s} id={`task-form-status-option-${s.toLowerCase().replace(' ', '-')}`}>{s}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
    
              {/* Collaboration & Organization: Assigned To, Tags */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <PeopleSelector 
                  selectedPeople={assignedTo} 
                  onChange={setAssignedTo} 
                  idPrefix="task-form-assigned-to"
                />
                <TagSelector 
                  selectedTags={tags} 
                  onChange={setTags} 
                  idPrefix="task-form-tags"
                />
              </div>

              {/* Dependencies */}
              <DependencySelector 
                currentTaskId={task?.id || ''} 
                selectedDependencies={dependencies} 
                onChange={setDependencies} 
                idPrefix="task-form-dependencies"
              />

              {/* Sub-tasks - Basic Implementation Placeholder */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium mb-1" id="task-form-subtasks-heading">Sub-tasks</h3>
                {subTasks.length > 0 ? (
                  <ul className="space-y-1 list-disc list-inside pl-4 bg-muted p-3 rounded-md">
                    {subTasks.map((sub, index) => (
                      <li key={index} className="text-sm" id={`task-form-subtask-item-${index}`}>{sub.title}</li>
                    ))}
                  </ul>
                ) : (
                  <p className="text-sm text-muted-foreground bg-muted p-3 rounded-md" id="task-form-no-subtasks-message">
                    No sub-tasks added yet.
                  </p>
                )}
                {/* Basic way to add sub-tasks - could be a modal or inline form */}
                {/* <Button type="button" variant="outline" size="sm" onClick={() => { ... }}>Add Sub-task</Button> */}
              </div>

              {/* Linked Notes */}
              <div className="space-y-2">
                  <div className="flex items-center justify-between">
                    <h3 className="text-sm font-medium" id="task-form-linked-notes-heading">Linked Notes</h3>
                    <Button 
                      type="button" 
                      variant="outline" 
                      size="sm" 
                      onClick={handleOpenCreateNoteDialog} 
                      disabled={!isEditing} // Only allow creating/linking if task exists
                      id="task-form-create-link-note-button"
                    >
                      <PlusCircle className="h-4 w-4 mr-2" /> Create & Link New Note
                    </Button>
                    {/* TODO: Add a button/modal to link EXISTING notes */}
                  </div>
                  {!isEditing && (
                    <p className="text-xs text-muted-foreground bg-amber-100 dark:bg-amber-900 border border-amber-300 dark:border-amber-700 p-2 rounded-md" id="task-form-save-task-for-notes-message">
                      Save the task to enable note linking and creation.
                    </p>
                  )}
                  {isEditing && linkedNotes.length > 0 ? (
                    <ul className="space-y-2 border p-3 rounded-md bg-muted/50">
                      {linkedNotes.map((note) => (
                        <li key={note.id} className="text-sm flex justify-between items-center p-2 rounded bg-background shadow-sm" id={`task-form-linked-note-item-${note.id}`}>
                          <span className="font-medium truncate pr-2" title={note.name}>{note.name || 'Untitled Note'}</span>
                          <div className="flex items-center space-x-1 flex-shrink-0">
                          <Button 
                            type="button" 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => navigate(`/notes/${note.id}`, { state: { from: location.pathname, fromTaskForm: true, taskIdForNote: task?.id } })} 
                            className="px-2 py-1 h-auto"
                            id={`task-form-edit-note-${note.id}-button`}
                          >
                            <Pencil className="h-3 w-3 mr-1" /> Edit
                          </Button>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={() => handleRemoveNoteFromTask(note.id)}
                            aria-label={`Remove note ${note.name} from task`}
                            className="px-2 py-1 h-auto text-destructive hover:text-destructive"
                            id={`task-form-remove-note-${note.id}-button`}
                          >
                            <X className="h-3 w-3 mr-1" /> Remove
                          </Button>
                          </div>
                        </li>
                      ))}
                    </ul>
                  ) : isEditing ? (
                    <p className="text-sm text-muted-foreground bg-muted p-3 rounded-md mt-2" id="task-form-no-linked-notes-message">
                      No notes are currently linked to this task.
                    </p>
                  ) : null }
                </div>
            </div>
    
            <div className="flex-shrink-0 bg-background p-4 border-t">
                <TaskFormActions
                    isEditing={isEditing}
                    onCancel={onCancel}
                    onArchive={task && onArchive ? () => onArchive(task.id!) : undefined}
                    onDelete={task && onDelete ? () => onDelete(task.id!) : undefined}
                />
            </div>
          </form>
        </div>

    );
}

export default TaskForm;
